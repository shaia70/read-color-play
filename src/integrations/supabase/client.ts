
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

console.log('=== SUPABASE CLIENT MODULE LOADING ===');

// Hardcoded values - these should always be available
const supabaseUrl = "https://pahqikhckqjujbhvqnyb.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBhaHFpa2hja3FqdWpiaHZxbnliIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwODkzNzMsImV4cCI6MjA2MzY2NTM3M30.zVNZAEFgwaVRPFHFYA-XN1kqcUeXl-24kj6fnsLQDH8";

console.log('Supabase URL:', supabaseUrl);
console.log('Supabase Key present:', !!supabaseKey);

// Store client instance
let supabaseClient: any = null;

// Function to get or create the client
export const getSupabaseClient = () => {
  console.log('=== Getting Supabase client ===');
  
  if (supabaseClient) {
    console.log('=== Returning existing Supabase client ===');
    return supabaseClient;
  }

  console.log('=== Creating new Supabase client ===');
  
  // Validate before creating client
  if (!supabaseUrl || typeof supabaseUrl !== 'string' || supabaseUrl.trim() === '') {
    console.error('ERROR: supabaseUrl is invalid:', supabaseUrl);
    throw new Error(`supabaseUrl is required but got: ${supabaseUrl}`);
  }

  if (!supabaseKey || typeof supabaseKey !== 'string' || supabaseKey.trim() === '') {
    console.error('ERROR: supabaseKey is invalid:', !!supabaseKey);
    throw new Error(`supabaseKey is required but got: ${!!supabaseKey}`);
  }

  console.log('About to call createClient with validated parameters...');
  console.log('Final URL check:', JSON.stringify(supabaseUrl));
  console.log('Final Key check (first 20 chars):', supabaseKey.substring(0, 20) + '...');

  // Create the client with explicit logging
  try {
    supabaseClient = createClient<Database>(supabaseUrl, supabaseKey);
    console.log('✅ Supabase client created successfully');
    return supabaseClient;
  } catch (error) {
    console.error('❌ Error creating supabase client:', error);
    throw error;
  }
};

// For backward compatibility, create a getter that calls the function
export const supabase = new Proxy({} as any, {
  get(target, prop) {
    const client = getSupabaseClient();
    return client[prop];
  }
});

console.log('=== SUPABASE CLIENT MODULE LOADED ===');
